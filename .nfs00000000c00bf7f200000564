#!/usr/bin/env python3
"""
Teste r√°pido do sistema SmartBI com o novo prompt mestre
"""

import requests
import json
import time

def test_new_prompt():
    """Testa o novo prompt mestre de consultoria estrat√©gica"""
    
    print("üî¨ Testando Sistema SmartBI com Prompt Mestre de Consultoria Estrat√©gica")
    print("=" * 80)
    
    try:
        # Teste com arquivo SQL
        print("üìÑ Carregando arquivo SQL de exemplo...")
        
        with open('exemplo_vendas.sql', 'rb') as f:
            files = {'file': ('exemplo_vendas.sql', f, 'text/plain')}
            print("üöÄ Enviando para an√°lise estrat√©gica...")
            
            start_time = time.time()
            response = requests.post('http://localhost:8000/analyze', files=files, timeout=60)
            processing_time = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"‚úÖ AN√ÅLISE CONCLU√çDA EM {processing_time:.2f}s")
            print("=" * 80)
            
            # Mostra resumo da an√°lise
            analysis = result.get('structured_analysis', {})
            full_response = result.get('full_response', '')
            
            print("üìä RESUMO EXECUTIVO:")
            print("-" * 50)
            summary = analysis.get('business_summary', '')
            if summary:
                print(summary[:300] + "..." if len(summary) > 300 else summary)
            else:
                # Pega o in√≠cio da resposta completa
                print(full_response[:300] + "..." if len(full_response) > 300 else full_response)
            
            print("\nüí° INSIGHTS ESTRAT√âGICOS:")
            print("-" * 50)
            insights = analysis.get('strategic_insights', [])
            for i, insight in enumerate(insights[:3], 1):
                print(f"{i}. {insight[:150]}...")
            
            print("\nüéØ RECOMENDA√á√ïES EXECUTIVAS:")
            print("-" * 50)  
            recommendations = analysis.get('recommendations', [])
            for i, rec in enumerate(recommendations[:3], 1):
                print(f"{i}. {rec[:150]}...")
            
            print("\n" + "=" * 80)
            print(f"ü§ñ Engine: {result.get('model_used', 'N/A')}")
            print(f"‚è±Ô∏è  Tempo: {result.get('processing_time', 0):.2f}s")
            print(f"üé≠ Demo Mode: {analysis.get('demo_mode', False)}")
            
            # Verifica se o prompt funcionou (procura por palavras-chave de consultoria)
            consultoria_keywords = ['revenue', 'strategic', 'competitive', 'framework', 'ROI', 'growth', 'market']
            keywords_found = sum(1 for keyword in consultoria_keywords if keyword.lower() in full_response.lower())
            
            print(f"üìà N√≠vel de Consultoria: {keywords_found}/{len(consultoria_keywords)} keywords encontradas")
            
            if keywords_found >= 3:
                print("üéâ PROMPT MESTRE FUNCIONANDO - Linguagem de consultoria detectada!")
            else:
                print("‚ö†Ô∏è  Prompt pode precisar de ajustes")
            
            return True
            
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == '__main__':
    success = test_new_prompt()
    print("\n" + "=" * 80)
    if success:
        print("üéä TESTE CONCLU√çDO COM SUCESSO!")
        print("O novo prompt mestre de consultoria estrat√©gica est√° funcionando.")
    else:
        print("‚ùå TESTE FALHOU - Verifique a configura√ß√£o do servidor.")
    print("=" * 80)
