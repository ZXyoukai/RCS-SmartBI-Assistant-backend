"""
GeminiAnalyzer - M√≥dulo de an√°lise usando Google Gemini API
===========================================================

Este m√≥dulo √© respons√°vel por enviar dados para o Google Gemini e processar
as respostas para gerar insights estrat√©gicos de neg√≥cios.

Autor: SmartBI Team
Vers√£o: 2.0.0
"""

import google.generativeai as genai
import os
import json
import time
import logging
from typing import Dict, Any, Optional
from datetime import datetime
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

logger = logging.getLogger(__name__)


class GeminiAnalyzer:
    """
    Classe respons√°vel pela an√°lise de dados usando Google Gemini API
    """
    
    def __init__(self):
        """
        Inicializa o analisador Gemini
        """
        self.api_key = os.getenv("GEMINI_API_KEY")
        self.model_name = "gemini-2.5-flash-lite"  # Modelo mais recente e eficiente
        self.model = None
        
        if self.api_key:
            try:
                genai.configure(api_key=self.api_key)
                self.model = genai.GenerativeModel(self.model_name)
                logger.info("‚úÖ Gemini API configurada com sucesso")
            except Exception as e:
                logger.error(f"‚ùå Erro ao configurar Gemini API: {e}")
                raise
        else:
            logger.warning("‚ö†Ô∏è GEMINI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    
    
    def check_connection(self) -> bool:
        """
        Verifica se a conex√£o com Gemini est√° funcionando
        
        Returns:
            bool: True se conectado, False caso contr√°rio
        """
        try:
            if not self.model:
                return False
            
            # Teste simples para verificar a conex√£o
            response = self.model.generate_content("Test connection")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao verificar conex√£o Gemini: {e}")
            return False
    
    
    def _create_analysis_prompt(self, data_content: str, data_info: Dict, file_type: str) -> str:
        """
        Cria o prompt para an√°lise estrat√©gica de neg√≥cios
        
        Args:
            data_content: Conte√∫do dos dados (SQL/CSV)
            data_info: Informa√ß√µes sobre os dados
            file_type: Tipo do arquivo (csv/sql)
        
        Returns:
            str: Prompt formatado para o Gemini
        """
        
        # Prompt estrat√©gico direto
        main_prompt = """
Analise o SQL ou csv que voc√™ enviou (estrutura das tabelas, inserts, dados) e traga um resumo em linguagem de neg√≥cios.
Voc√™ √© um consultor estrat√©gico s√™nior de uma das Big 4 (McKinsey, BCG, Bain, Deloitte) analisando dados empresariais para o C-Level de uma organiza√ß√£o.
OBJETIVO: Analise os dados fornecidos e gere insights estrat√©gicos como um partner experiente de consultoria de neg√≥cios.
METODOLOGIA EXIGIDA:
RESUMO EXECUTIVO: Traduza a estrutura e volume de dados para linguagem de neg√≥cios, identificando maturidade organizacional, complexidade operacional e posicionamento competitivo
INSIGHTS ESTRAT√âGICOS: Desenvolva 4-6 insights de alto impacto focando em:
Oportunidades de crescimento e expans√£o de mercado
Otimiza√ß√£o de revenue streams e pricing strategy
Efici√™ncia operacional e redu√ß√£o de custos
Vantagem competitiva e diferencia√ß√£o
Gest√£o de risco e compliance
Potencial de transforma√ß√£o digital
RECOMENDA√á√ïES EXECUTIVAS: Forne√ßa 5-7 recomenda√ß√µes espec√≠ficas e acion√°veis com:
Impacto financeiro estimado (ROI, revenue upside, cost savings)
Timeline de implementa√ß√£o
Prioriza√ß√£o baseada em esfor√ßo vs impacto
Considera√ß√µes de investimento e recursos
ESTILO E TOM:
Linguagem executiva sofisticada (C-Level appropriate)
Quantifica√ß√£o de oportunidades com m√©tricas de neg√≥cio
Foco em value creation e competitive advantage
Refer√™ncias a frameworks estrat√©gicos (Porter, Ansoff, Blue Ocean)
Benchmarking setorial e best practices
IMPORTANTE:
N√ÉO mencione aspectos t√©cnicos de TI, programa√ß√£o ou detalhes de implementa√ß√£o
FOQUE exclusivamente em strategic business value
USE linguagem de consultoria estrat√©gica empresarial
QUANTIFIQUE oportunidades sempre que poss√≠vel
PRIORIZE insights que impactem P&L, market share ou operational excellence

DADOS PARA AN√ÅLISE:
"""
        
        return f"{main_prompt}\n\n{data_content}"
    
    

    
    
    async def analyze_data(self, data_content: str, data_info: Dict, file_type: str) -> Dict[str, Any]:
        """
        Realiza an√°lise dos dados usando Gemini
        
        Args:
            data_content: Conte√∫do dos dados (SQL/CSV)
            data_info: Informa√ß√µes sobre os dados
            file_type: Tipo do arquivo (csv/sql)
        
        Returns:
            Dict: Resposta do Gemini em formato JSON
        """
        
        if not self.model:
            raise Exception("Gemini API n√£o configurada. Verifique a GEMINI_API_KEY")
        
        start_time = time.time()
        
        try:
            # 1. Criar prompt
            prompt = self._create_analysis_prompt(data_content, data_info, file_type)
            
            logger.info(f"ü§ñ Enviando dados para Gemini (prompt: {len(prompt)} chars)")
            
            # 2. Enviar para Gemini
            response = self.model.generate_content(prompt)
            
            if not response or not response.text:
                raise Exception("Resposta vazia do Gemini")
            
            response_text = response.text.strip()
            logger.info(f"‚úÖ Resposta recebida do Gemini ({len(response_text)} chars)")
            
            # 3. Preparar resultado final (apenas a resposta do Gemini)
            processing_time = time.time() - start_time
            
            result = {
                "gemini_response": response_text,
                "processing_time": round(processing_time, 2),
                "model_used": self.model_name,
                "analyzed_at": datetime.now().isoformat()
            }
            
            logger.info(f"üéØ An√°lise conclu√≠da em {processing_time:.2f}s")
            return result
            
        except Exception as e:
            logger.error(f"Erro na an√°lise Gemini: {e}")
            raise Exception(f"Erro ao processar an√°lise: {str(e)}")
    



    def get_model_info(self) -> Dict[str, Any]:
        """
        Retorna informa√ß√µes sobre o modelo Gemini em uso
        
        Returns:
            Dict: Informa√ß√µes do modelo
        """
        return {
            "model_name": self.model_name,
            "provider": "Google Gemini",
            "configured": self.model is not None,
            "api_key_present": bool(self.api_key)
        }
