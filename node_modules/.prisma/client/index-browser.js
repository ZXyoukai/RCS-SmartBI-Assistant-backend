
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.QueriesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  question_text: 'question_text',
  created_at: 'created_at'
};

exports.Prisma.ResultsScalarFieldEnum = {
  id: 'id',
  query_id: 'query_id',
  result_type: 'result_type',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.HistoryScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  query_id: 'query_id',
  success: 'success',
  execution_time: 'execution_time',
  created_at: 'created_at'
};

exports.Prisma.ExportsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  file_type: 'file_type',
  file_path: 'file_path',
  created_at: 'created_at'
};

exports.Prisma.SuggestionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  content: 'content',
  source: 'source',
  created_at: 'created_at'
};

exports.Prisma.Access_logsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  action: 'action',
  ip_address: 'ip_address',
  created_at: 'created_at'
};

exports.Prisma.Ai_chat_sessionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  session_token: 'session_token',
  status: 'status',
  context_data: 'context_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ai_interactionsScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  user_id: 'user_id',
  interaction_type: 'interaction_type',
  input_text: 'input_text',
  input_language: 'input_language',
  processed_query: 'processed_query',
  ai_response: 'ai_response',
  execution_status: 'execution_status',
  execution_time_ms: 'execution_time_ms',
  confidence_score: 'confidence_score',
  error_message: 'error_message',
  fallback_used: 'fallback_used',
  version: 'version',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.Ai_insightsScalarFieldEnum = {
  id: 'id',
  interaction_id: 'interaction_id',
  user_id: 'user_id',
  insight_type: 'insight_type',
  title: 'title',
  description: 'description',
  data_analysis: 'data_analysis',
  confidence_level: 'confidence_level',
  impact_score: 'impact_score',
  status: 'status',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.Ai_fallbacksScalarFieldEnum = {
  id: 'id',
  trigger_pattern: 'trigger_pattern',
  fallback_type: 'fallback_type',
  response_template: 'response_template',
  escalation_level: 'escalation_level',
  is_active: 'is_active',
  usage_count: 'usage_count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ai_response_cacheScalarFieldEnum = {
  id: 'id',
  input_hash: 'input_hash',
  input_text: 'input_text',
  response_data: 'response_data',
  interaction_type: 'interaction_type',
  hit_count: 'hit_count',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Associated_databasesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  url: 'url',
  schema: 'schema',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  users: 'users',
  queries: 'queries',
  results: 'results',
  history: 'history',
  exports: 'exports',
  suggestions: 'suggestions',
  access_logs: 'access_logs',
  ai_chat_sessions: 'ai_chat_sessions',
  ai_interactions: 'ai_interactions',
  ai_insights: 'ai_insights',
  ai_fallbacks: 'ai_fallbacks',
  ai_response_cache: 'ai_response_cache',
  associated_databases: 'associated_databases'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
