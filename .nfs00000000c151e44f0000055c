# 🤖 SmartBI Assistant - Análise de Dados com IA

Sistema de análise de dados que utiliza a API do Google Gemini para gerar insights estratégicos de negócios a partir de bases de dados ou arquivos CSV.

## 🚀 Funcionalidades

- **Upload de Dados**: Suporte para arquivos CSV e SQL dumps
- **Análise Inteligente**: Utiliza Google Gemini para análise avançada
- **Insights de Negócios**: Gera resumos e insights estratégicos
- **API RESTful**: Interface simples via FastAPI
- **Processamento de SQL**: Analisa estrutura de tabelas e dados

## 📋 Pré-requisitos

- Python 3.8+
- Chave de API do Google Gemini
- Dependências do requirements.txt

## 🛠️ Instalação

1. **Clone o repositório**
```bash
git clone <seu-repositorio>
cd RCS-SmartBI-Assistant-backend
```

2. **Instale as dependências**
```bash
pip install -r requirements.txt
```

3. **Configure as variáveis de ambiente**
```bash
cp .env.example .env
# Edite o arquivo .env e adicione sua GEMINI_API_KEY
```

4. **Execute o servidor**
```bash
python main.py
```

## 🔧 Configuração

### Variáveis de Ambiente (.env)

```env
GEMINI_API_KEY=sua_chave_da_api_gemini_aqui
PORT=8000
HOST=0.0.0.0
ENVIRONMENT=development
```

### Como obter a chave da API Gemini

1. Acesse [Google AI Studio](https://makersuite.google.com/app/apikey)
2. Faça login com sua conta Google
3. Clique em "Create API Key"
4. Copie a chave gerada e cole no arquivo `.env`

## 📡 Endpoints da API

### 📋 Informações da API
```http
GET /
```

### 📊 Upload e Análise de Dados
```http
POST /upload
Content-Type: multipart/form-data

Form Data:
- file: arquivo CSV ou SQL
```

**Exemplo de resposta:**
```json
{
  "success": true,
  "message": "Análise concluída com sucesso",
  "file_info": {
    "filename": "dados.csv",
    "size": 1024,
    "type": "csv"
  },
  "analysis": {
    "business_summary": "Resumo executivo dos dados...",
    "strategic_insights": [
      "Insight estratégico 1",
      "Insight estratégico 2"
    ],
    "recommendations": [
      "Recomendação 1",
      "Recomendação 2"
    ]
  },
  "gemini_response": "Resposta completa do Gemini..."
}
```

## 🎯 Tipos de Arquivo Suportados

### CSV
- Arquivos com dados tabulares
- Separador: vírgula (,) ou ponto-e-vírgula (;)
- Encoding: UTF-8

### SQL
- Dumps de banco de dados
- Comandos CREATE TABLE e INSERT
- Suporte para MySQL e PostgreSQL

## 📖 Exemplo de Uso

### Via cURL
```bash
curl -X POST "http://localhost:8000/upload" \
     -H "accept: application/json" \
     -H "Content-Type: multipart/form-data" \
     -F "file=@dados.csv"
```

### Via Python
```python
import requests

url = "http://localhost:8000/upload"
files = {"file": open("dados.csv", "rb")}
response = requests.post(url, files=files)
print(response.json())
```

## 🧠 Prompt do Gemini

O sistema utiliza o seguinte prompt para análise:

```
Analise o SQL/CSV que você enviou (estrutura das tabelas, inserts, dados) e traga um resumo em linguagem de negócios.

Depois, com base nisso, gerar insights estratégicos para tomada de decisões e tbm leve em conta os registros.

Dê apenas insights, não fale mais coisas adicionais. Não precisa dizer nada técnico relacionado a Principais Entidades e Relacionamentos.
```

## 📊 Estrutura do Projeto

```
RCS-SmartBI-Assistant-backend/
├── main.py                 # Servidor FastAPI principal
├── gemini_analyzer.py      # Módulo de análise com Gemini
├── data_processor.py       # Processamento de dados
├── requirements.txt        # Dependências
├── .env.example           # Exemplo de configuração
├── temp/                  # Arquivos temporários
└── README.md              # Este arquivo
```

## 🔍 Monitoramento e Logs

O sistema registra automaticamente:
- Uploads de arquivos
- Chamadas para a API Gemini
- Erros e exceções
- Tempo de processamento

## 🛡️ Segurança

- Validação de tipos de arquivo
- Limite de tamanho de upload
- Sanitização de conteúdo SQL
- Limpeza automática de arquivos temporários

## 📈 Performance

- Processamento assíncrono
- Cache de resultados (em desenvolvimento)
- Limite de tamanho de arquivo: 50MB

## 🚀 Deploy

### Desenvolvimento
```bash
python main.py
```

### Produção
```bash
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
```

### Docker (em desenvolvimento)
```bash
docker build -t smartbi-backend .
docker run -p 8000:8000 --env-file .env smartbi-backend
```

## 🤝 Contribuição

1. Faça fork do projeto
2. Crie uma branch para sua feature
3. Commit suas mudanças
4. Push para a branch
5. Abra um Pull Request

## 📝 Licença

Este projeto está sob a licença MIT. Veja o arquivo LICENSE para mais detalhes.

## 🆘 Suporte

Para suporte e dúvidas:
- Abra uma issue no GitHub
- Entre em contato pelo email: [seu-email]

## 🔄 Changelog

### v2.0.0 (Atual)
- Integração com Google Gemini
- Remoção de modelos ML próprios
- Foco em insights de negócios
- API simplificada

### v1.0.0
- Pipeline de ML básico
- Análise com modelos próprios
