#!/usr/bin/env python3
"""
Teste da configuração da API Key do Gemini
"""
import os
from dotenv import load_dotenv

# Carregar .env
load_dotenv()

print("=== TESTE DE CONFIGURAÇÃO DA API KEY ===")
print()

# 1. Verificar se arquivo .env existe
env_path = ".env"
if os.path.exists(env_path):
    print("✅ Arquivo .env encontrado")
    
    # Ler conteúdo do .env
    with open(env_path, 'r') as f:
        content = f.read()
        print("\n📄 Conteúdo do .env:")
        for i, line in enumerate(content.split('\n'), 1):
            if line.strip():
                if 'GEMINI_API_KEY' in line:
                    print(f"   {i}: {line} <-- ESTA LINHA")
                else:
                    print(f"   {i}: {line}")
else:
    print("❌ Arquivo .env não encontrado")

print()

# 2. Verificar variável de ambiente
api_key_from_env = os.getenv("GEMINI_API_KEY")
if api_key_from_env:
    print(f"🔑 API Key carregada: {api_key_from_env[:20]}...")
    print(f"📏 Tamanho da API Key: {len(api_key_from_env)} caracteres")
else:
    print("❌ GEMINI_API_KEY não encontrada nas variáveis de ambiente")

print()

# 3. Testar importação do GeminiAnalyzer
print("🧪 Testando GeminiAnalyzer:")
try:
    from gemini_analyzer import GeminiAnalyzer
    analyzer = GeminiAnalyzer()
    
    print(f"   🔧 API Key no analyzer: {analyzer.api_key[:20] if analyzer.api_key else 'None'}...")
    print(f"   ✅ Modelo configurado: {analyzer.model is not None}")
    
    model_info = analyzer.get_model_info()
    print(f"   📊 Info do modelo: {model_info}")
    
    # Teste de conexão
    if analyzer.check_connection():
        print("   ✅ Conexão com Gemini funcionando!")
    else:
        print("   ❌ Falha na conexão com Gemini")
        
except Exception as e:
    print(f"   ❌ Erro: {e}")
    import traceback
    traceback.print_exc()

print()
print("=== FIM DO TESTE ===")
